<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bic Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.bcblog.top/"/>
  <updated>2020-04-20T15:27:38.000Z</updated>
  <id>http://www.bcblog.top/</id>
  
  <author>
    <name>bic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java锁之Synchronized与ReentrantLock的使用</title>
    <link href="http://www.bcblog.top/2020/04/20/Java%E9%94%81%E4%B9%8BSynchronized%E4%B8%8EReentrantLock%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.bcblog.top/2020/04/20/Java%E9%94%81%E4%B9%8BSynchronized%E4%B8%8EReentrantLock%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-20T15:22:44.000Z</published>
    <updated>2020-04-20T15:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Synchronized与ReentrantLock是Java中常用的加锁同步方式，并且都是阻塞式的同步，用于多线程之间的同步与互斥操作。</p><h2 id="一、Synchronized"><a href="#一、Synchronized" class="headerlink" title="一、Synchronized"></a>一、Synchronized</h2><h3 id="1-修饰实例方法"><a href="#1-修饰实例方法" class="headerlink" title="1.修饰实例方法"></a>1.修饰实例方法</h3><p>在实体类<code>SynchronizedTest</code>中开启两个线程，分别对两个不同实例对象调用同一个实例方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个实例对象</span></span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s0 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s1 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t0线程,执行s0的实例方法</span></span><br><span class="line">Thread t0 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t1线程，执行s1的实例方法</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s1.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" is printing "</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 is printing 0</span><br><span class="line">Thread-0 is printing 0</span><br><span class="line">Thread-0 is printing 1</span><br><span class="line">Thread-1 is printing 1</span><br><span class="line">Thread-0 is printing 2</span><br><span class="line">Thread-1 is printing 2</span><br><span class="line">Thread-1 is printing 3</span><br><span class="line">Thread-0 is printing 3</span><br><span class="line">Thread-0 is printing 4</span><br><span class="line">Thread-1 is printing 4</span><br></pre></td></tr></table></figure><p>可以看到两个线程是交替执行的。</p><p>用<code>synchronized</code>对<code>printLog</code>()方法修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个实例对象</span></span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s0 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s1 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t0线程,执行s0的实例方法</span></span><br><span class="line">Thread t0 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t1线程，执行s1的实例方法</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s1.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" is printing "</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 is printing 0</span><br><span class="line">Thread-0 is printing 0</span><br><span class="line">Thread-0 is printing 1</span><br><span class="line">Thread-1 is printing 1</span><br><span class="line">Thread-0 is printing 2</span><br><span class="line">Thread-1 is printing 2</span><br><span class="line">Thread-1 is printing 3</span><br><span class="line">Thread-0 is printing 3</span><br><span class="line">Thread-0 is printing 4</span><br><span class="line">Thread-1 is printing 4</span><br></pre></td></tr></table></figure><p>可以看出，虽然用<code>synchronized</code>对<code>printLog</code>()加锁了，但两个线程还是交替执行的。这是因为当<code>synchronized</code>修饰实例方法时，这种情况下的锁对象是<strong>当前实例对象</strong>，因此只有<strong>同一个实例对象</strong>调用此方法才会产生互斥效果。</p><p>将代码进行修改，两个线程都调用同一个对象的<code>printLog()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个实例对象</span></span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s0 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s1 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t0线程,执行s0的实例方法</span></span><br><span class="line">Thread t0 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t1线程，执行s0的实例方法</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" is printing "</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 is printing 0</span><br><span class="line">Thread-0 is printing 1</span><br><span class="line">Thread-0 is printing 2</span><br><span class="line">Thread-0 is printing 3</span><br><span class="line">Thread-0 is printing 4</span><br><span class="line">Thread-1 is printing 0</span><br><span class="line">Thread-1 is printing 1</span><br><span class="line">Thread-1 is printing 2</span><br><span class="line">Thread-1 is printing 3</span><br><span class="line">Thread-1 is printing 4</span><br></pre></td></tr></table></figure><p>可以看出，此时两个线程间是互斥的，即只有某一个线程中的代码执行完之后，对象锁释放，另一个线程中的代码再开始执行。</p><h3 id="2-修饰静态类方法"><a href="#2-修饰静态类方法" class="headerlink" title="2.修饰静态类方法"></a>2.修饰静态类方法</h3><p>当<code>synchronized</code>修饰静态方法时，锁对象是当前类的Class对象。所以即使在不同的线程中调用不同实例对象，也会有互斥效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个实例对象</span></span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s0 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s1 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t0线程,执行s0的实例方法</span></span><br><span class="line">Thread t0 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t1线程，执行s1的实例方法</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s1.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//synchronized修饰静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" is printing "</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 is printing 0</span><br><span class="line">Thread-1 is printing 1</span><br><span class="line">Thread-1 is printing 2</span><br><span class="line">Thread-1 is printing 3</span><br><span class="line">Thread-1 is printing 4</span><br><span class="line">Thread-0 is printing 0</span><br><span class="line">Thread-0 is printing 1</span><br><span class="line">Thread-0 is printing 2</span><br><span class="line">Thread-0 is printing 3</span><br><span class="line">Thread-0 is printing 4</span><br></pre></td></tr></table></figure><h3 id="3-修饰代码块"><a href="#3-修饰代码块" class="headerlink" title="3.修饰代码块"></a>3.修饰代码块</h3><p><code>synchronized</code>修饰代码块时，锁对象就是<code>synchronized</code>后面括号中的对象。任何Object对象都可以作为锁对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> SynchronizedTest s0 = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t0线程,执行s0的实例方法</span></span><br><span class="line">Thread t0 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启t1线程，执行s0的实例方法</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s0.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//synchronized修饰代码块</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" is printing "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 is printing 0</span><br><span class="line">Thread-0 is printing 1</span><br><span class="line">Thread-0 is printing 2</span><br><span class="line">Thread-0 is printing 3</span><br><span class="line">Thread-0 is printing 4</span><br><span class="line">Thread-1 is printing 0</span><br><span class="line">Thread-1 is printing 1</span><br><span class="line">Thread-1 is printing 2</span><br><span class="line">Thread-1 is printing 3</span><br><span class="line">Thread-1 is printing 4</span><br></pre></td></tr></table></figure><h2 id="二、ReentrantLock"><a href="#二、ReentrantLock" class="headerlink" title="二、ReentrantLock"></a>二、ReentrantLock</h2><h3 id="1-ReentrantLock加锁解锁"><a href="#1-ReentrantLock加锁解锁" class="headerlink" title="1.ReentrantLock加锁解锁"></a>1.ReentrantLock加锁解锁</h3><p>Java中的<code>ReentrantLock</code>是一个<strong>接口</strong>，与<strong>关键字</strong><code>synchronized</code>的使用方式不同，它的加锁和解锁操作都需要<strong>手动</strong>实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化ReentrantLock对象</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ReentrantLockTest r1 = <span class="keyword">new</span> ReentrantLockTest();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">r1.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">r1.printLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" is printing "</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 is printing 0</span><br><span class="line">Thread-0 is printing 1</span><br><span class="line">Thread-0 is printing 2</span><br><span class="line">Thread-0 is printing 3</span><br><span class="line">Thread-0 is printing 4</span><br><span class="line">Thread-1 is printing 0</span><br><span class="line">Thread-1 is printing 1</span><br><span class="line">Thread-1 is printing 2</span><br><span class="line">Thread-1 is printing 3</span><br><span class="line">Thread-1 is printing 4</span><br></pre></td></tr></table></figure><p>使用<code>ReentrantLock</code>时，将解锁操作放在<code>finally</code>代码块中是因为，与<code>synchronized</code>不同，当异常发生时，<code>ReentrantLock</code>不会自动释放锁，因此将解锁操作放在<code>finally</code>代码块中，保证任何时候锁都能正常被释放。</p><h3 id="2-使用ReentrantLock实现公平锁"><a href="#2-使用ReentrantLock实现公平锁" class="headerlink" title="2.使用ReentrantLock实现公平锁"></a>2.使用ReentrantLock实现公平锁</h3><h4 id="非公平锁与公平锁"><a href="#非公平锁与公平锁" class="headerlink" title="非公平锁与公平锁"></a>非公平锁与公平锁</h4><table><thead><tr><th align="center">锁类型</th><th align="center">含义</th><th align="center">优</th><th align="center">缺</th></tr></thead><tbody><tr><td align="center">非公平锁</td><td align="center">多个线程直接尝试去获取锁，获取锁的顺序与调用锁的顺序无关</td><td align="center">CPU唤醒线程的开销较小，整体吞吐效率较高</td><td align="center">可能会导致某些线程由于长时间得不到锁造成饿死</td></tr><tr><td align="center">公平锁</td><td align="center">多个线程进入队列排队，FIFO，按照调用锁的顺序去获取锁</td><td align="center">所有线程都能得到资源，不会出现饿死</td><td align="center">吞吐量较低，队列中除了第一个线程，其他线程都会阻塞，CPU唤醒阻塞线程的开销较大</td></tr></tbody></table><p>默认情况下，<code>synchronized</code>与<code>ReentrantLock</code>都是非公平锁，<strong>而<code>ReentrantLock</code>有一个带布尔类型参数的构造器，可以通过传入<code>true</code>来创建一个公平锁：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FairReentrantLockTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sharedNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建公平锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (sharedNum &lt; <span class="number">20</span>) &#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sharedNum++;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 获得锁, sharedNum is "</span> + sharedNum);</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">FairReentrantLockTest fr = <span class="keyword">new</span> FairReentrantLockTest();</span><br><span class="line"><span class="comment">//开启三个线程</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(fr);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(fr);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(fr);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 获得锁, sharedNum is 1</span><br><span class="line">Thread-1 获得锁, sharedNum is 2</span><br><span class="line">Thread-2 获得锁, sharedNum is 3</span><br><span class="line">Thread-0 获得锁, sharedNum is 4</span><br><span class="line">Thread-1 获得锁, sharedNum is 5</span><br><span class="line">Thread-2 获得锁, sharedNum is 6</span><br><span class="line">Thread-0 获得锁, sharedNum is 7</span><br><span class="line">Thread-1 获得锁, sharedNum is 8</span><br><span class="line">Thread-2 获得锁, sharedNum is 9</span><br><span class="line">Thread-0 获得锁, sharedNum is 10</span><br><span class="line">Thread-1 获得锁, sharedNum is 11</span><br><span class="line">Thread-2 获得锁, sharedNum is 12</span><br><span class="line">Thread-0 获得锁, sharedNum is 13</span><br><span class="line">Thread-1 获得锁, sharedNum is 14</span><br><span class="line">Thread-2 获得锁, sharedNum is 15</span><br><span class="line">Thread-0 获得锁, sharedNum is 16</span><br><span class="line">Thread-1 获得锁, sharedNum is 17</span><br><span class="line">Thread-2 获得锁, sharedNum is 18</span><br><span class="line">Thread-0 获得锁, sharedNum is 19</span><br><span class="line">Thread-1 获得锁, sharedNum is 20</span><br><span class="line">Thread-2 获得锁, sharedNum is 21</span><br><span class="line">Thread-0 获得锁, sharedNum is 22</span><br></pre></td></tr></table></figure><p>可以看出，三个线程按照调用锁的顺序依次获得锁，对<code>sharedNum</code>的值进行修改。</p><h3 id="3-使用ReentrantReadWriteLock实现读写锁"><a href="#3-使用ReentrantReadWriteLock实现读写锁" class="headerlink" title="3.使用ReentrantReadWriteLock实现读写锁"></a>3.使用ReentrantReadWriteLock实现读写锁</h3><p>在实际开发中，通常会定义一个线程间共享的用作缓存的数据结构，对该数据结构可进行读写操作。但是写操作开始到结束之间，不能有其他读操作进来，并且写操作完成之后的更新数据需要对后续的读操作可见。使用<code>ReentrantReadWriteLock</code>，在读操作时获取读锁，写操作时获取写锁，即可以实现该功能。当写锁被获取到时，后续的读写都会被阻塞，只有该写锁被释放之后，后续的操作才可以继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化读写锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock(</span><br><span class="line"><span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟线程间共享的数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String number = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Reader(), <span class="string">"读线程 1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Reader(), <span class="string">"读线程 2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Writer(), <span class="string">"写线程"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读操作</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reader</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建读锁</span></span><br><span class="line">lock.readLock().lock();</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" Number is "</span> + number);</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放读锁</span></span><br><span class="line">lock.readLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写操作</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建写锁</span></span><br><span class="line">lock.writeLock().lock();</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 正在写入 "</span> + i);</span><br><span class="line">number = number.concat(<span class="string">""</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放写锁</span></span><br><span class="line">lock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">读线程 2 Number is 0</span><br><span class="line">读线程 1 Number is 0</span><br><span class="line">写线程 正在写入 1</span><br><span class="line">读线程 1 Number is 01</span><br><span class="line">读线程 2 Number is 01</span><br><span class="line">写线程 正在写入 3</span><br><span class="line">读线程 2 Number is 013</span><br><span class="line">读线程 1 Number is 013</span><br><span class="line">写线程 正在写入 5</span><br><span class="line">读线程 1 Number is 0135</span><br><span class="line">读线程 2 Number is 0135</span><br><span class="line">写线程 正在写入 7</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br><span class="line">读线程 1 Number is 01357</span><br><span class="line">读线程 2 Number is 01357</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Synchronized与ReentrantLock是Java中常用的加锁同步方式，并且都是阻塞式的同步，用于多线程之间的同步与互斥操作。&lt;/p&gt;
&lt;h2 id=&quot;一、Synchronized&quot;&gt;&lt;a href=&quot;#一、Synchronized&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.bcblog.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>算法积累之走台阶问题</title>
    <link href="http://www.bcblog.top/2020/03/19/%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF%E4%B9%8B%E8%B5%B0%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://www.bcblog.top/2020/03/19/%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF%E4%B9%8B%E8%B5%B0%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-19T14:59:46.000Z</published>
    <updated>2020-03-19T15:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法积累之走台阶问题"><a href="#算法积累之走台阶问题" class="headerlink" title="算法积累之走台阶问题"></a>算法积累之走台阶问题</h2><h3 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h3><p>问题模型：一共有n级台阶，一次可以走1步或2步，走完这n级台阶一共有多少种走法？</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>思路：用函数step表示n级台阶的走法，很显然<code>step(1)=1</code>，<code>step(2) = 2</code>.对于<code>step(3</code>)可以慢慢去列举，当然还可以这样思考，如果第一步走一阶，剩下两阶的走法就是<code>step(2)</code>，如果第一步走两阶，剩下一阶的走法就是<code>step(1)</code>，所以很容易得出<code>step(3) = step(2) + step(1);</code>进而可以类推出n阶台阶的递推公式：<br>$$<br>step(n) = step(n - 1) + step(n - 2);<br>$$<br>那么这个问题可以使用<strong>递归</strong>解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归求解走台阶问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cbi</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">count = -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">count = n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count = step(n - <span class="number">1</span>) + step(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输入台阶数："</span>);</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line">JumpStep jumpStep = <span class="keyword">new</span> JumpStep();</span><br><span class="line">jumpStep.step(n);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"一共有"</span> + count  + <span class="string">"种走法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>由递推公式可以看出，step(n)其本质是一个<strong>斐波那契数列</strong>，即后一项等于前两项的和：<br>$$<br>1,2,3,5,8,13,…<br>$$<br>所以除了使用递归，这个问题还可以使用<strong>迭代法</strong>解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代法求解走台阶问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cbi</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpSteps</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">count = -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">count = n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">count = temp1 + temp2;</span><br><span class="line">temp1 = temp2;</span><br><span class="line">temp2 = count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"一共有："</span> + count + <span class="string">"种走法"</span>);</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输入台阶数："</span>);</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line">JumpSteps jumpSteps = <span class="keyword">new</span> JumpSteps();</span><br><span class="line">jumpSteps.step(n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充一下递归和迭代的区别："><a href="#补充一下递归和迭代的区别：" class="headerlink" title="补充一下递归和迭代的区别："></a>补充一下递归和迭代的区别：</h4><p>迭代是<strong>将输出的结果作为输入</strong>再次进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    n = f(n); <span class="comment">//将输出的结果作为输入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归是函数<strong>自己调用自己</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(n)</span> </span>&#123;</span><br><span class="line">   f(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际开发中，能用迭代尽量不要使用递归（虽然递归看起来很简洁易懂，但会重复地调用函数，冗余计算，递归太深的话还可能造成栈溢出）</p><h3 id="加强版"><a href="#加强版" class="headerlink" title="加强版"></a>加强版</h3><p>问题模型：一共有n级台阶，一次可以走1步到n步，走完这n级台阶一共有多少种走法？</p><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><p>用递归的思路去分析，本质和普通版是一样的，加一层循环求和即可：<br>$$<br>step(n) = step(n-1) + step(n-2) + … + step(1) + 1<br>$$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归求解走台阶问题</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cbi</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">count += step(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输入台阶数："</span>);</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line">JumpStep jumpStep = <span class="keyword">new</span> JumpStep();</span><br><span class="line"><span class="keyword">int</span> count = jumpStep.step(n);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"一共有"</span> + count + <span class="string">"种走法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接法"><a href="#直接法" class="headerlink" title="直接法"></a>直接法</h4><p>emmm…高中学的还给老师了……<br>$$<br>F(n)    =  F(n-1) + F(n-2) + F(n-3) + … + F(1) + 1<br>$$</p><p>$$<br>F(n-1) =                F(n-2) + F(n-3) + … + F(1) + 1<br>$$</p><p>$$<br>F(n) = 2*F(n-1)<br>$$</p><p>这不就是等比数列……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>,n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输入台阶数："</span>);</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line">JumpStep jumpStep = <span class="keyword">new</span> JumpStep();</span><br><span class="line"><span class="keyword">int</span> count = jumpStep.step(n);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"一共有"</span> + count + <span class="string">"种走法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法积累之走台阶问题&quot;&gt;&lt;a href=&quot;#算法积累之走台阶问题&quot; class=&quot;headerlink&quot; title=&quot;算法积累之走台阶问题&quot;&gt;&lt;/a&gt;算法积累之走台阶问题&lt;/h2&gt;&lt;h3 id=&quot;普通版&quot;&gt;&lt;a href=&quot;#普通版&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://www.bcblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法积累之汉诺塔问题</title>
    <link href="http://www.bcblog.top/2020/03/17/%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF%E4%B9%8B%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    <id>http://www.bcblog.top/2020/03/17/%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF%E4%B9%8B%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-17T13:18:59.000Z</published>
    <updated>2020-03-17T14:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录之前面试遇到一个求解汉诺塔移动次数的问题，无奈才疏学浅，整的头疼脑热也没研究出个一二三，算法这块还是巩固得太少了。不过本着“不会算法的程序员不是个好厨师”的原则，还是花点时间研究一下这个问题吧。</p><p>汉诺塔问题源于古印度的一个游戏，主要的场景用模型表示如下：有三根相同的柱子A，B，C，A柱上有n个穿孔圆盘，现在需要将A柱上的n个盘移动到C柱上，规定一次只能移动一个圆盘，并且需保证大圆盘在下，小圆盘在上。真是佩服古印度大师们精(xian)湛(de)高(dan)超(ten)的脑回路~</p><p><img src="/images/Hannuo1.png" alt></p><p>这个问题乍一看确实难以下手，很明显一个盘子一个盘子地去分析实在太复杂了。对于盘子数量n，若n=1，则只需要将其从A(From)直接移动到C(To)即可，当n=2时，B(Transit)将起到一个中转的作用，即先将第一个盘子从A移动到B，再将A中剩下的一个盘子移动到C，最后将B中的盘子移动到C即可。</p><p>当n&gt;2时，用列举的方式去分析就没那么容易了。由于这是一个规模为n的问题，当n缩小到1时很容易解决，因此可以考虑使用<strong>分治法</strong>的思想。分治法解决的问题一般有以下几个特征：</p><p>1、 该问题的规模缩小到一定程度就可以容易的解决；</p><p>2、该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质；</p><p>3、利用该问题分解出子问题的解，可以合并为该问题的解；</p><p>4、该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p><p>分治法大多采用<strong>递归</strong>的方式去执行，因此对于汉诺塔问题，使用递归去解决是第一要想到的。使用递归需要确定两大要素，一是什么时候递归结束，二是找到递归的等价关系。很显然，这个问题递归结束的条件是n = 1。对于递归的等价关系，可以用这样的思路去想，即将n个盘子分解成两个部分，将上面n-1个盘子看成一个整体：</p><p><img src="/images/Hannuo2.png" alt></p><p>先将n-1个盘子整体移动到B(Transit):</p><p><img src="/images/Hannuo3.png" alt></p><p>再将A(From)中的最后一个盘子移动到C(To):</p><p><img src="/images/Hannuo4.png" alt></p><p>最后将B(Transit)中的n-1个盘子移动到C(To):</p><p><img src="/images/Hannuo5.png" alt></p><p>对于n-1个盘子的移动方式，很显然，与n个盘子的移动方式一致。这也是为何这个问题需要使用递归的原因了。</p><p>好了，话不多说，Talk is cheap,Show me the code!</p><p>代码其实非常简洁~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  求解汉诺塔问题的移动方式和移动次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 毕淳 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hannuo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录移动次数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  递归求解汉诺塔问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 盘子数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> from 起始柱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> transit 中转柱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to 目标柱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, String from, String transit, String to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(from + <span class="string">"--&gt;"</span> + to);</span><br><span class="line"><span class="comment">//每移动一次，移动次数+1</span></span><br><span class="line">count++; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//将n-1个盘子从A--&gt;B</span></span><br><span class="line">move(n - <span class="number">1</span>, from, to, transit); </span><br><span class="line"><span class="comment">//将A中最下面一个盘子移动到C</span></span><br><span class="line">move(<span class="number">1</span>, from, transit, to); </span><br><span class="line"><span class="comment">//将B中n-1个盘子移动到C</span></span><br><span class="line">move(n - <span class="number">1</span>, transit, from, to); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String from = <span class="string">"A"</span>;</span><br><span class="line">String transit = <span class="string">"B"</span>;</span><br><span class="line">String to = <span class="string">"C"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"输入盘子数量："</span>);</span><br><span class="line"></span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"移动方式："</span>);</span><br><span class="line"></span><br><span class="line">move(n, from, transit, to);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"移动次数："</span> + count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果示例：</p><p><img src="/images/Hannuo6.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录之前面试遇到一个求解汉诺塔移动次数的问题，无奈才疏学浅，整的头疼脑热也没研究出个一二三，算法这块还是巩固得太少了。不过本着“不会算法的程序员不是个好厨师”的原则，还是花点时间研究一下这个问题吧。&lt;/p&gt;
&lt;p&gt;汉诺塔问题源于古印度的一个游戏，主要的场景用模型表示如下：有
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://www.bcblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android删除指定目录下的文件和文件夹</title>
    <link href="http://www.bcblog.top/2020/03/16/Android%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://www.bcblog.top/2020/03/16/Android%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2020-03-16T12:50:33.000Z</published>
    <updated>2020-03-16T13:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android删除指定目录下的文件和文件夹。删除单个文件可直接调用<code>File</code>类的<code>delete()</code>方法。对于非空文件夹，需要遍历文件夹下的所有子目录，遍历到单个文件直接<code>delete()</code>，遍历到文件夹，则递归执行删除操作。话不多说，show me the fucking code!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 删除单个文件</span><br><span class="line">     *</span><br><span class="line">     * @param path 被删除文件的路径名</span><br><span class="line">     * @return 删除成功：true &#x2F; 删除失败：false</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private boolean deleteSingleFile(String path) &#123;</span><br><span class="line"></span><br><span class="line">        File file &#x3D; new File(path);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果路径名表示的文件是一个标准文件(非文件夹)且存在，则delete</span><br><span class="line">        if (file.isFile() &amp;&amp; file.exists()) &#123;</span><br><span class="line">            return file.delete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除文件夹下的所有子目录和子文件</span><br><span class="line">     * @param path 被删除文件加的路径名</span><br><span class="line">     * @return 删除成功：true &#x2F; 删除失败：false</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private boolean deleteDirectory(String path) &#123;</span><br><span class="line"></span><br><span class="line">        boolean flag &#x3D; false;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果path不以文件分隔符结尾，则增加分隔符</span><br><span class="line">        if (!path.endsWith(File.separator)) &#123;</span><br><span class="line">            path &#x3D; path + File.separator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file &#x3D; new File(path);</span><br><span class="line">        &#x2F;&#x2F;判断路径名表示的是否是文件夹且是否存在</span><br><span class="line">        if (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File[] files &#x3D; file.listFiles();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;遍历删除指定文件夹下的所有文件及目录</span><br><span class="line">        for (File file1 : files) &#123;</span><br><span class="line">            if(file1.isFile()) &#123;</span><br><span class="line">                &#x2F;&#x2F;删除子文件</span><br><span class="line">                flag &#x3D; deleteSingleFile(file1.getAbsolutePath());</span><br><span class="line">                if(!flag) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;删除子目录,用到递归</span><br><span class="line">                flag &#x3D; deleteDirectory(file1.getAbsolutePath());</span><br><span class="line">                if(!flag) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(!flag) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return file.delete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android删除指定目录下的文件和文件夹。删除单个文件可直接调用&lt;code&gt;File&lt;/code&gt;类的&lt;code&gt;delete()&lt;/code&gt;方法。对于非空文件夹，需要遍历文件夹下的所有子目录，遍历到单个文件直接&lt;code&gt;delete()&lt;/code&gt;，遍历到文件夹，
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://www.bcblog.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Okhttp3基本使用</title>
    <link href="http://www.bcblog.top/2020/03/04/Okhttp3%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.bcblog.top/2020/03/04/Okhttp3%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-04T14:40:43.000Z</published>
    <updated>2020-03-04T15:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp是目前非常主流的Android网络编程框架，是一个高效的HTTP客户端。它的请求/响应API使用到了Builder设计模式，支持阻塞式的同步请求和<strong>带回调</strong>的异步请求。</p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1、引入Okhttp3库"><a href="#1、引入Okhttp3库" class="headerlink" title="1、引入Okhttp3库"></a>1、引入Okhttp3库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"com.squareup.okhttp3:okhttp:4.4.0"</span>)</span><br></pre></td></tr></table></figure><h2 id="2、添加网络权限"><a href="#2、添加网络权限" class="headerlink" title="2、添加网络权限"></a>2、添加网络权限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br></pre></td></tr></table></figure><h1 id="二、使用Okhttp3提交请求"><a href="#二、使用Okhttp3提交请求" class="headerlink" title="二、使用Okhttp3提交请求"></a>二、使用Okhttp3提交请求</h1><h2 id="1、get请求"><a href="#1、get请求" class="headerlink" title="1、get请求"></a>1、get请求</h2><p>分四步：</p><p>1、构建OkHttpClient对象</p><p>2、构建Request对象</p><p>3、构建Call对象</p><p>4、异步：通过call.enqueue提交请求 ，并且带有请求成功与失败的回调</p><p>​      同步：通过call.execute()提交请求，这种方式是阻塞的，因此需要在子线程中操作</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送一个异步get请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建OkHttpClient对象client</span></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建Request对象request</span></span><br><span class="line">        <span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"https://www.baidu.com"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过request和client构建call对象</span></span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过enqueue提交异步请求</span></span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NotNull Call call, @NotNull IOException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String res = response.body().string();</span><br><span class="line">                <span class="comment">//回到UI线程</span></span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//TODO：UI操作</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="同步："><a href="#同步：" class="headerlink" title="同步："></a>同步：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送一个同步步get请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建OkHttpClient对象client</span></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建Request对象request</span></span><br><span class="line">        <span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"https://www.baidu.com"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过request和client构建call对象</span></span><br><span class="line">        <span class="keyword">final</span> Call call = client.newCall(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//call.execute()是阻塞的，因此需要在子线程中操作</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Response response = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response = call.execute();</span><br><span class="line">                    Log.d(TAG, <span class="string">"run: "</span> + response.body().toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2、post请求"><a href="#2、post请求" class="headerlink" title="2、post请求"></a>2、post请求</h2><p>post方式提交请求时，<strong>在构建Request对象之前，需要构造一个RequestBody对象</strong>，用来携带需要提交的数据。</p><p>分五步：</p><p>1、构建OkHttpClient对象</p><p>2、构建RequestBody对象，用来携带需要提交的数据</p><p>3、构建Request对象</p><p>4、构建Call对象</p><p>5、异步：通过call.enqueue提交请求 ，并且带有请求成功与失败的回调</p><p>​      同步：通过call.execute()提交请求，这种方式是阻塞的，因此需要在子线程中操作</p><p>以异步提交表单举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建OkHttpClient对象client</span></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建RequestBody对象携带需要客户端提交的数据</span></span><br><span class="line">        <span class="comment">//提交表单</span></span><br><span class="line">        RequestBody requestBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                .add(<span class="string">"mb"</span>,<span class="string">"18751859698"</span>)</span><br><span class="line">                .add(<span class="string">"pwd"</span>,<span class="string">"123123"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建Request对象request</span></span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(requestBody)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建Call对象</span></span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NotNull Call call, @NotNull IOException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//回到UI线程</span></span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//TODO：UI操作</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="http的get和post的区别"><a href="#http的get和post的区别" class="headerlink" title="http的get和post的区别"></a>http的get和post的区别</h2><p>1、参数的传输方式不同，get参数放在url中，post参数放在RequestBody中</p><p>2、参数长度限制不同，get方式存放在url中的参数是有限的，post没有</p><p>3、get安全性低于post，因为参数直接暴露在url上</p><p>4、get方式，浏览器一次发送两次包，把http header和data一并发送出去，服务器响应200；post方式，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OkHttp是目前非常主流的Android网络编程框架，是一个高效的HTTP客户端。它的请求/响应API使用到了Builder设计模式，支持阻塞式的同步请求和&lt;strong&gt;带回调&lt;/strong&gt;的异步请求。&lt;/p&gt;
&lt;h1 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一
      
    
    </summary>
    
    
    
      <category term="Android | 网络编程" scheme="http://www.bcblog.top/tags/Android-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android UI之RadioGroup+Fragment实现页面切换</title>
    <link href="http://www.bcblog.top/2020/03/01/Android-UI%E4%B9%8BRadioGroup-Fragment%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2/"/>
    <id>http://www.bcblog.top/2020/03/01/Android-UI%E4%B9%8BRadioGroup-Fragment%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2/</id>
    <published>2020-03-01T02:40:42.000Z</published>
    <updated>2020-03-01T02:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>当前很多App的主页都采用通过底部或上部的导航按钮实现页面的切换，比如微信，淘宝等。这种UI比较简单的实现方法是通过RadioGroup+Fragment去实现，通过在RadioGroup的选中事件监听中实现Fragment切换的逻辑即可。</p><h1 id="一、RadioGroup定义"><a href="#一、RadioGroup定义" class="headerlink" title="一、RadioGroup定义"></a>一、RadioGroup定义</h1><p>新建模块，在MainActivity的布局中定义一个位于底部RadioGroup，其中包含四个RadioButton。</p><p>activity_main.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot;</span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;RadioGroup</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;radioGroup&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;bottom&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;gray&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;btn_general&quot;</span><br><span class="line">            style&#x3D;&quot;@style&#x2F;MyRadioButtonStyle&quot;</span><br><span class="line">            android:checked&#x3D;&quot;true&quot;</span><br><span class="line">            android:drawableTop&#x3D;&quot;@drawable&#x2F;icon_general_selector&quot;</span><br><span class="line">            android:text&#x3D;&quot;通用设置&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;btn_sound&quot;</span><br><span class="line">            style&#x3D;&quot;@style&#x2F;MyRadioButtonStyle&quot;</span><br><span class="line">            android:drawableTop&#x3D;&quot;@drawable&#x2F;icon_sound_selector&quot;</span><br><span class="line">            android:text&#x3D;&quot;声音设置&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;btn_system&quot;</span><br><span class="line">            style&#x3D;&quot;@style&#x2F;MyRadioButtonStyle&quot;</span><br><span class="line">            android:drawableTop&#x3D;&quot;@drawable&#x2F;icon_system_selector&quot;</span><br><span class="line">            android:text&#x3D;&quot;系统设置&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;btn_operation&quot;</span><br><span class="line">            style&#x3D;&quot;@style&#x2F;MyRadioButtonStyle&quot;</span><br><span class="line">            android:drawableTop&#x3D;&quot;@drawable&#x2F;icon_operation_selector&quot;</span><br><span class="line">            android:text&#x3D;&quot;操作说明&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;RadioGroup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>icon_general_selector.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;item android:drawable&#x3D;&quot;@drawable&#x2F;icon_general_p&quot; android:state_checked&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">    &lt;item android:drawable&#x3D;&quot;@drawable&#x2F;icon_general_n&quot; android:state_checked&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;selector&gt;</span><br></pre></td></tr></table></figure><p>因为四个RadioButton的样式属性均一致，为了避免代码冗余，在styles文件中定义MyRadioButtonStyle用于规定RadioButton的属性：</p><p>styles.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Base application theme. --&gt;</span><br><span class="line">    &lt;style name&#x3D;&quot;AppTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class="line">        &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;style name&#x3D;&quot;MyRadioButtonStyle&quot;&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:gravity&quot;&gt;center&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:layout_height&quot;&gt;50dp&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:layout_width&quot;&gt;0dp&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:layout_weight&quot;&gt;1&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:button&quot;&gt;@null&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:textColor&quot;&gt;@color&#x2F;text_selector&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure><p>text_selector.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;item android:color&#x3D;&quot;@color&#x2F;white&quot; android:state_checked&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">    &lt;item android:color&#x3D;&quot;@color&#x2F;gray&quot; android:state_checked&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;selector&gt;</span><br></pre></td></tr></table></figure><h1 id="二、Fragment定义"><a href="#二、Fragment定义" class="headerlink" title="二、Fragment定义"></a>二、Fragment定义</h1><h2 id="BaseFragment封装"><a href="#BaseFragment封装" class="headerlink" title="BaseFragment封装"></a>BaseFragment封装</h2><p>首先定义继承自<code>android.support.v4.app.Fragment</code>的BaseFragment抽象类作为四个Fragment的基类</p><p>BaseFragment.class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rfdemo.fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> View mRootView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mRootView = inflater.inflate(attachLayoutResID(), container,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line"></span><br><span class="line">        initData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mRootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回Fragment的布局文件id</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">attachLayoutResID</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到控件id</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T extends View&gt; <span class="function">T <span class="title">findViewById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mRootView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) mRootView.findViewById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Fragment中view的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Fragment中data的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Fragment"><a href="#创建Fragment" class="headerlink" title="创建Fragment"></a>创建Fragment</h2><p>创建四个Fragment的布局文件，本demo中暂时只在每个fragment中定义一个TextView用于展示效果</p><p>fragment_general.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;textView&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;&quot;</span><br><span class="line">        android:layout_centerInParent&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>GeneralFragment.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rfdemo.fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rfdemo.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv_general;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">attachLayoutResID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.fragment_general;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv_general = (TextView) findViewById(R.id.textView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv_general.setText(<span class="string">"通用设置"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩余三个Fragment的创建方法与此类似。</p><h2 id="三、使用RadioGroup切换Fragment"><a href="#三、使用RadioGroup切换Fragment" class="headerlink" title="三、使用RadioGroup切换Fragment"></a>三、使用RadioGroup切换Fragment</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rfdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rfdemo.fragment.GeneralFragment;</span><br><span class="line"><span class="keyword">import</span> com.example.rfdemo.fragment.OperationFragment;</span><br><span class="line"><span class="keyword">import</span> com.example.rfdemo.fragment.SoundFragment;</span><br><span class="line"><span class="keyword">import</span> com.example.rfdemo.fragment.SystemFragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义控件</span></span><br><span class="line">    <span class="keyword">private</span> RadioGroup mRadioGroup;</span><br><span class="line">    <span class="keyword">private</span> RadioButton btn_general;</span><br><span class="line">    <span class="keyword">private</span> RadioButton btn_sound;</span><br><span class="line">    <span class="keyword">private</span> RadioButton btn_system;</span><br><span class="line">    <span class="keyword">private</span> RadioButton btn_operation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Fragment</span></span><br><span class="line">    <span class="keyword">private</span> GeneralFragment generalFragment;</span><br><span class="line">    <span class="keyword">private</span> SoundFragment soundFragment;</span><br><span class="line">    <span class="keyword">private</span> SystemFragment systemFragment;</span><br><span class="line">    <span class="keyword">private</span> OperationFragment operationFragment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Fragment数组存放四个Fragment</span></span><br><span class="line">    Fragment[] mFragments = <span class="keyword">new</span> Fragment[]&#123;</span><br><span class="line">            <span class="keyword">new</span> GeneralFragment(),</span><br><span class="line">            <span class="keyword">new</span> SoundFragment(),</span><br><span class="line">            <span class="keyword">new</span> SystemFragment(),</span><br><span class="line">            <span class="keyword">new</span> OperationFragment()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前页面</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line"></span><br><span class="line">        initFragment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mRadioGroup = findViewById(R.id.radioGroup);</span><br><span class="line">        btn_general = findViewById(R.id.btn_general);</span><br><span class="line">        btn_sound = findViewById(R.id.btn_sound);</span><br><span class="line">        btn_system = findViewById(R.id.btn_system);</span><br><span class="line">        btn_operation = findViewById(R.id.btn_operation);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (generalFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            generalFragment = <span class="keyword">new</span> GeneralFragment();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (soundFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            soundFragment = <span class="keyword">new</span> SoundFragment();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (systemFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            systemFragment = <span class="keyword">new</span> SystemFragment();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (operationFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            operationFragment = <span class="keyword">new</span> OperationFragment();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();</span><br><span class="line">        <span class="comment">//设置默认界面</span></span><br><span class="line">        ft.replace(R.id.rootLayout, mFragments[<span class="number">0</span>]).commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RadioGroup选中事件监听</span></span><br><span class="line">        mRadioGroup.setOnCheckedChangeListener(<span class="keyword">new</span> RadioGroup.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (checkedId) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.btn_general:</span><br><span class="line">                        setIndexFragment(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.btn_sound:</span><br><span class="line">                        setIndexFragment(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.btn_system:</span><br><span class="line">                        setIndexFragment(<span class="number">2</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.btn_operation:</span><br><span class="line">                        setIndexFragment(<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切换Fragment</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIndexFragment</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(currentIndex == index) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();</span><br><span class="line">        <span class="comment">//隐藏当前界面</span></span><br><span class="line">        ft.hide(mFragments[currentIndex]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!mFragments[index].isVisible()) &#123;</span><br><span class="line">            ft.replace(R.id.rootLayout, mFragments[index]).show(mFragments[index]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ft.show(mFragments[index]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ft.commit();</span><br><span class="line">        currentIndex = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当前很多App的主页都采用通过底部或上部的导航按钮实现页面的切换，比如微信，淘宝等。这种UI比较简单的实现方法是通过RadioGroup+Fragment去实现，通过在RadioGroup的选中事件监听中实现Fragment切换的逻辑即可。&lt;/p&gt;
&lt;h1 id=&quot;一、Ra
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://www.bcblog.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android跨进程开发之AIDL通信框架的搭建</title>
    <link href="http://www.bcblog.top/2020/02/23/Android%E8%B7%A8%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E4%B9%8BAIDL%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.bcblog.top/2020/02/23/Android%E8%B7%A8%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E4%B9%8BAIDL%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-02-22T16:17:11.000Z</published>
    <updated>2020-02-25T14:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程：系统资源分配的最小单位</p><p>线程：进程内部的独立执行单元，是程序执行的最小单位</p><p>进程间的资源和数据相互隔离，进程内的线程间共享大多数资源</p><h2 id="跨进程通信（IPC，Inter-Process-Communication）"><a href="#跨进程通信（IPC，Inter-Process-Communication）" class="headerlink" title="跨进程通信（IPC，Inter Process Communication）"></a>跨进程通信（IPC，Inter Process Communication）</h2><p>进程间通过内核提供的机制完成数据交换</p><p>Linux跨进程通信的方式：管道，消息队列，信号，共享内存，信号量，Socket套接字（基于C/S架构）</p><h2 id="Android中为什么要引入多进程开发"><a href="#Android中为什么要引入多进程开发" class="headerlink" title="Android中为什么要引入多进程开发?"></a>Android中为什么要引入多进程开发?</h2><p>1.通过多进程将系统资源占用率高的功能剥离到子进程，避免主进程因系统资源紧张造成<strong>OOM</strong>。 </p><p>2.避免应用架构的臃肿。将一些独立的功能剥离到子进程，实现功能的<strong>解耦</strong>。例如实现推送，后台任务等较为单一的功能。</p><p>3.进程间通过相互监听状态实现保活。</p><h2 id="Android跨进程通信的核心：Binder机制"><a href="#Android跨进程通信的核心：Binder机制" class="headerlink" title="Android跨进程通信的核心：Binder机制"></a>Android跨进程通信的核心：<strong>Binder机制</strong></h2><p>基于C/S架构，稳定性好，不需要考虑进程间同步的问题；底层驱动基于内存映射，整体数据拷贝次数只有一次，性能较好；安全性高，UID/PID可见。</p><p>Binder架构：</p><p><img src="/images/AIDL0.png" alt="Binder架构"></p><p>1、编写基于Binder的AIDL文件，提供对外的接口和实现</p><p>2、通过AIDL文件，调用Java层的BinderProxy对象</p><p>3、通过Java层的BinderProxy对象调用Native（C++)层的BpBinder和BBinder对象</p><p>4、最底层，内核层基于Binder驱动，本质是内存的映射</p><h2 id="Android跨进程通信的方式："><a href="#Android跨进程通信的方式：" class="headerlink" title="Android跨进程通信的方式："></a>Android跨进程通信的方式：</h2><p>1、AIDL（基于Binder)</p><p>2、基于AIDL: Intent、Messenger、ContentProvider</p><p>3、文件共享</p><h1 id="二、AIDL通信框架的搭建"><a href="#二、AIDL通信框架的搭建" class="headerlink" title="二、AIDL通信框架的搭建"></a>二、AIDL通信框架的搭建</h1><h2 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL:"></a>AIDL:</h2><p>是定义IPC过程中接口的一种描述语言</p><p>AIDL文件在编译过程中生成接口的实现类，用于IPC通信</p><h2 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h2><p>子进程中有一个<strong>连接服务</strong>和一个<strong>消息服务</strong>。</p><p>连接服务中，子进程向主进程提供三个方法：</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>connect()</code></td><td align="center">建立连接</td></tr><tr><td align="center"><code>disconnect()</code></td><td align="center">断开连接</td></tr><tr><td align="center"><code>isConnected()</code></td><td align="center">获取链接状态</td></tr></tbody></table><p>消息服务中，主进程调用三个方法：</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>sendMessage()</code></td><td align="center">通过子进程的连接发送消息</td></tr><tr><td align="center"><code>registerMessageReceiverListener()</code></td><td align="center">监听子进程中的消息</td></tr><tr><td align="center"><code>unRegisterMessageReceiverListener()</code></td><td align="center">注销监听</td></tr></tbody></table><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>1.1.创建子进程的service用于启动子进程，并在Manifest中将该service定义子在私有进程中。</p><p>RemoteService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *管理和提供子进程的连接和消息服务</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> 毕淳</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span> 2020/2/21 0021 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AndroidManifest.xml:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">     android:name=<span class="string">".RemoteService"</span></span><br><span class="line">     android:enabled=<span class="string">"true"</span></span><br><span class="line">     android:exported=<span class="string">"true"</span></span><br><span class="line">     android:process=<span class="string">":remote"</span>&gt; <span class="comment">//将该service定义子在私有进程中</span></span><br><span class="line">&lt;/service&gt;ro'i'd</span><br></pre></td></tr></table></figure><p>1.2.在MainActivity中启动RemoteService，Android中可通过<code>startService()</code>或<code>bindService()</code>启动Service，考虑到需要通过AIDL进行进程间通信，因此使用<code>bindService()</code>方法。</p><p>MainActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RemoteService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bindService(intent, <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、AIDL实现连接服务的IPC通信"><a href="#2、AIDL实现连接服务的IPC通信" class="headerlink" title="2、AIDL实现连接服务的IPC通信"></a>2、AIDL实现连接服务的IPC通信</h2><p>2.1.建立连接服务的AIDL文件，命名为IConnectionService.</p><p>images/<img src="/images/AIDL1.png" alt></p><p><img src="/images/AIDL2.png" alt></p><p>FInish后，会自动创建一个与代码同路径的AIDL文件IConnectionService.aidl.</p><p><img src="/images/AIDL3.png" alt></p><p>2.2.在连接服务的AIDL文件中定义所需的三个方法</p><p>IConnectionService.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//连接服务</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IConnectionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>; <span class="comment">//连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span></span>; <span class="comment">//断连</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span></span>; <span class="comment">//获取子进程连接状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义完成后，编译后系统会自动生成一个IConnectionService的实现类：</p><p><img src="/images/AIDL4.png" alt></p><p>2.3.在RemoteService中实现连接服务</p><p>RemoteService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *管理和提供子进程的连接和消息服务</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> 毕淳</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span> 2020/2/21 0021 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IConnectionService connectionService = <span class="keyword">new</span> IConnectionService.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connectionService.asBinder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stub是IConnectionService类内部的一个抽象类，Stub类中定义了三个抽象方法，即我们在AIDL连接服务中定义的三个方法。</p><p>2.4.实现连接服务中子进程提供给主进程的三个方法</p><p>RemoteService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理和提供子进程的连接和消息服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 毕淳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 0021 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isConnected = <span class="keyword">false</span>; <span class="comment">//判断连接状态的标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IConnectionService connectionService = <span class="keyword">new</span> IConnectionService.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>); <span class="comment">//建立连接过程一般是一个阻塞过程，因此这里我们用一个休眠5s的Thread去模拟</span></span><br><span class="line">                isConnected = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//注意：Toast是跑在主进程中的，而AIDL调用的服务端的实现是跑在对应Binder的线程池中，所以connect(),disconnect(),isConnect()三个方法都是跑在三个不同的子线程中的，因此如下直接Toast没有效果</span></span><br><span class="line">                <span class="comment">//Toast.makeText(RemoteService.this, "connected", Toast.LENGTH_SHORT).show();</span></span><br><span class="line">                <span class="comment">//正确的做法是通过Handler切换到主线程后再Toast</span></span><br><span class="line">                mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(RemoteService.<span class="keyword">this</span>, <span class="string">"connected"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            isConnected = <span class="keyword">false</span>;</span><br><span class="line">            Toast.makeText(RemoteService.<span class="keyword">this</span>, <span class="string">"disconnect"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isConnected;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connectionService.asBinder(); <span class="comment">//返回IBinder对象，主进程通过这个IBinder对象获取连接服务的代理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.5在MainActivity中实现对连接服务的跨进程IPC调用</p><p>（1）定义三个Button用于触发连接服务的三个方法并设置对应的点击事件</p><p>activity_main.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;btn_connect&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;连接&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;btn_disconnect&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;断连&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;btn_isConnected&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;连接状态&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>（2）在MainActivity中实现连接服务中三个方法的IPC调用。首先需要定义一个IConnectionService对象connectionServiceProxy，相当于是子进程中IConnectionService调用对象的一个代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IConnectionService connectionServiceProxy;</span><br></pre></td></tr></table></figure><p>（3）connectionServiceProxy的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bindService(intent, <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">                connectionServiceProxy = IConnectionService.Stub.asInterface(iBinder);<span class="comment">//初始化</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>（4）实现按钮点击事件后，MainActivity的完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btn_connect;</span><br><span class="line">    <span class="keyword">private</span> Button btn_disconnect;</span><br><span class="line">    <span class="keyword">private</span> Button btn_isConnected;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IConnectionService connectionServiceProxy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        btn_connect = findViewById(R.id.btn_connect);</span><br><span class="line">        btn_disconnect = findViewById(R.id.btn_disconnect);</span><br><span class="line">        btn_isConnected = findViewById(R.id.btn_isConnected);</span><br><span class="line"></span><br><span class="line">        btn_connect.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_disconnect.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_isConnected.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RemoteService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        bindService(intent, <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">                connectionServiceProxy = IConnectionService.Stub.asInterface(iBinder);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_connect:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connectionServiceProxy.connect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_disconnect:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connectionServiceProxy.disconnect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_isConnected:</span><br><span class="line">                <span class="keyword">boolean</span> isConnected = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    isConnected = connectionServiceProxy.isConnected();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, String.valueOf(isConnected), Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，点击连接，<strong>界面阻塞</strong>5s后弹出connected</p><p><img src="/images/AIDL5.png" alt>  <img src="/images/AIDL6.png" alt></p><p>这样的IPC调用是阻塞式的，即主进程中调用的<code>connectionServiceProxy.connect()</code>方法需要等待服务端（子进程）中的<code>connect()</code>方法执行结束后，才能执行完成。这样便会存在一个问题，设想这样一个场景，用户点击连接后，界面会卡顿住，等到后台连接服务完成连接后，界面才恢复正常，这样显然是不合理的。合理的状态是，AIDL进行IPC通信时，子线程的耗时不会影响到主线程，<strong>正确的做法是使用AIDL中的<code>oneway</code>关键字修饰<code>connect()</code>方法：</strong></p><p>IConnectionService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//连接服务e</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IConnectionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">oneway <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>; <span class="comment">//连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span></span>; <span class="comment">//断连</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span></span>; <span class="comment">//获取子进程连接状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：AIDL中，用<code>oneway</code>修饰的方法不能带有任何返回值</p><h2 id="三、AIDL实现消息服务的IPC通信"><a href="#三、AIDL实现消息服务的IPC通信" class="headerlink" title="三、AIDL实现消息服务的IPC通信"></a>三、AIDL实现消息服务的IPC通信</h2><p>建立消息服务的AIDL文件，命名为IMessageService.</p><p>IMessageService.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息服务</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerMessageReceiverListener</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unRegisterMessageReceiverListener</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息服务需要定义三个方法：<code>sendMessage()</code>、<code>registerMessageReceiverListener()</code>，<code>unregisterMessageReceiverListener()</code>。对于发送消息<code>sendMessage()</code>，需要定义一个消息的实体类作为该方法的参数。新建实体类Message。</p><p><img src="/images/AIDL10.png" alt></p><p>在Message中定义两个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String content;  <span class="comment">//消息内容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isSendSuccess;  <span class="comment">//消息发送状态</span></span><br></pre></td></tr></table></figure><p><strong>一个实体对象要在AIDL中进行IPC通信，必须实现序列化接口，Android中常用Parcelable方式实现序列化接口。</strong></p><p>Android studio可通过插件的方式快速实现Parceble接口（安装<em>Android Parcelable code generator</em>插件即可）</p><p>最后再定义好Message实体类两个对象的<code>get()</code>和<code>set()</code>方法。</p><p>Message.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;  <span class="comment">//消息内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSendSuccess;  <span class="comment">//消息发送状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(<span class="keyword">this</span>.content);</span><br><span class="line">        dest.writeByte(<span class="keyword">this</span>.isSendSuccess ? (<span class="keyword">byte</span>) <span class="number">1</span> : (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Message</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = in.readString();</span><br><span class="line">        <span class="keyword">this</span>.isSendSuccess = in.readByte() != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Message&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Message&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Message <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Message(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Message[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSendSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isSendSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSendSuccess</span><span class="params">(<span class="keyword">boolean</span> sendSuccess)</span> </span>&#123;</span><br><span class="line">        isSendSuccess = sendSuccess;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来需要将Message对象作为参数传入<code>sendMessage()</code>方法，但aidl文件是无法直接引用.java的文件的。因此需要定义一个与Message.java对应的（<strong>同名且同路径</strong>）aidl文件Message.aidl.</p><p><img src="/images/AIDL9.png" alt></p><p>在Message.aidl中需要定义一个名为Message的parcelable类型的对象，将Message.aidl与Message.java进行关联。</p><p>Message.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo.entity;</span><br><span class="line">parcelable Message;</span><br></pre></td></tr></table></figure><p>在IMessageService.aidl中，<strong>导入Message实体类</strong>并将Message实体类对象传入<code>sendMessage()</code>方法。<strong>aidl文件中的方法参数若是一个实体类型而非基本类型，必须用in/out关键字修饰</strong></p><p>IMessageService.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo;</span><br><span class="line"><span class="keyword">import</span> com.example.ipcdemo.entity.Message;</span><br><span class="line"><span class="comment">//消息服务</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(in Message message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerMessageReceiverListener</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unRegisterMessageReceiverListener</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>registerMessageReceiverListener()</code>和<code>unRegisterMessageReceiverListener()</code>方法，需要传入消息接收的Listener对象，新建MessageReceiveListener.aidl文件，并定义<code>onReceiveMessage()</code>方法，将Message实体对象作为参数传入。相当于服务端接收消息的回调。</p><p>MessageReceiveListener.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo;</span><br><span class="line"><span class="keyword">import</span> com.example.ipcdemo.entity.Message;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MessageReceiveListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceiveMessage</span><span class="params">(in Message message)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IMessageService.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo;</span><br><span class="line"><span class="keyword">import</span> com.example.ipcdemo.entity.Message;</span><br><span class="line"><span class="keyword">import</span> com.example.ipcdemo.MessageReceiveListener;</span><br><span class="line"><span class="comment">//消息服务</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(in Message message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerMessageReceiverListener</span><span class="params">(MessageReceiveListener messageReceiveListener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unRegisterMessageReceiverListener</span><span class="params">(MessageReceiveListener messageReceiveListener)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，与消息服务有关的aidl文件就创建完成了，编译后，系统会自动生成相关的实现，接下来需要在RemoteService中完成消息服务的实现。</p><p>由于之前在RemoteService中返回的是连接服务的IBinder对象，即<code>connectionService.asBinder()</code>，从而提供给主进程实现连接服务的IPC调用。实现消息服务后，又需要返回消息服务的IBinder对象给主进程，因此需要新建一个通用的接口作为RemoteService中onBind方法的返回值。新建IServiceManager的aidl文件作为服务的管理者，在RemoteService中返回IServiceManager的IBinder对象即可，这样，主进程就可以根据该IBinder对象，去查询所需的服务，进而完成相关服务的IPC调用。</p><p>IServiceManager.aidl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServiceManager</span> </span>&#123;</span><br><span class="line">    <span class="function">IBinder <span class="title">getService</span><span class="params">(String ServiceName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在RemoteService中实现消息服务IMessageService和服务管理者IServiceManager，在IServiceManagerd的实现中，根据服务的名称返回对应服务的IBinder对象，最后在<code>onBind()</code>方法中返回IServiceManager的IBinder对象。</p><p>RemoteService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ipcdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteCallbackList;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.ipcdemo.entity.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isConnected = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RemoteCallbackList&lt;MessageReceiveListener&gt; messageReceiveListenerRemoteCallbackList = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;  <span class="comment">//定时任务</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledFuture scheduledFuture;</span><br><span class="line"></span><br><span class="line">    IConnectionService connectionService = <span class="keyword">new</span> IConnectionService.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                isConnected = <span class="keyword">true</span>;</span><br><span class="line">                mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(RemoteService.<span class="keyword">this</span>, <span class="string">"connect"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                scheduledFuture = scheduledThreadPoolExecutor.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> size = messageReceiveListenerRemoteCallbackList.beginBroadcast();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                            message.setContent(<span class="string">"this message from remote"</span>);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                messageReceiveListenerRemoteCallbackList.getBroadcastItem(i).onReceiveMessage(message);  <span class="comment">//将子进程收到的消息回调给主进程</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        messageReceiveListenerRemoteCallbackList.finishBroadcast();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">5000</span>, <span class="number">5000</span>, TimeUnit.MILLISECONDS); <span class="comment">//在连接建立成功之后，通过定时任务模拟消息接收的过程，每隔5s收到一条消息</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disConnect</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            isConnected = <span class="keyword">false</span>;</span><br><span class="line">            scheduledFuture.cancel(<span class="keyword">true</span>);  <span class="comment">//断连之后，停止定时任务</span></span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(RemoteService.<span class="keyword">this</span>, <span class="string">"disConnect"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isConnected;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IMessageService messageService = <span class="keyword">new</span> IMessageService.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">final</span> Message message)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(RemoteService.<span class="keyword">this</span>, message.getContent(), Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isConnected) &#123;</span><br><span class="line">                message.setSendSuccess(<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                message.setSendSuccess(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerMessageReceiverListener</span><span class="params">(MessageReceiveListener messageReceiveListener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (messageReceiveListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                messageReceiveListenerRemoteCallbackList.register(messageReceiveListener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unRegisterMessageReceiverListener</span><span class="params">(MessageReceiveListener messageReceiveListener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (messageReceiveListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                messageReceiveListenerRemoteCallbackList.unregister(messageReceiveListener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IServiceManager serviceManager = <span class="keyword">new</span> IServiceManager.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IBinder <span class="title">getService</span><span class="params">(String ServiceName)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (IConnectionService<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>().<span class="title">equals</span>(<span class="title">ServiceName</span>)) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> connectionService.asBinder();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IMessageService<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>().<span class="title">equals</span>(<span class="title">ServiceName</span>)) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> messageService.asBinder();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serviceManager.asBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        scheduledThreadPoolExecutor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>); <span class="comment">//初始化定时任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RemoteService中实现消息服务时，<code>sendMessage()</code>方法实现是，切换到主线程，将消息的内容Toast出来，并根据连接的状态<code>isConnnected</code>设置消息发送的状态<code>message.setSendSuccess(true/flase);</code>对于注册/注销消息接收监听的方法<code>registerMessageReceiverListener()</code>,<code>unRegisterMessageReceiverListener()</code>通过一个泛型为<code>MessageReceiveListener</code>的<code>RemoteCallbackList</code>去存储消息监听。接下来需要<strong>模拟消息接收的过程</strong>，模拟的方法是在连接建立成功之后，定义一个间隔5s的定时任务，通过遍历监听的容器<code>messageReceiveListenerArrayList</code>，将子进程收到的消息回调给主进程。最后在连接服务的<code>disconnect()</code>方法中停止该定时任务。</p><p>到这里remote进程中消息服务的定义和实现就完成了，接下来需要在主进程中完成消息服务相关接口的设置，并实现主进程和子进程间消息服务的IPC通信。</p><p>首先在MainActivity中初始化IMessageService和IServiceManger，之前只有连接服务时，在<code>onServiceConnected()</code>中直接初始化即可，现在由于使用了IServiceManger，需要作一些改动，原先只有连接服务时对连接服务的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RemoteService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bindService(intent, <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">                connectionServiceProxy = IConnectionService.Stub.asInterface(iBinder);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>增加了消息服务IMessageService和服务管理者IServiceManger后，应改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RemoteService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bindService(intent, <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serviceManagerProxy = IServiceManager.Stub.asInterface(iBinder);</span><br><span class="line">                    connectionServiceProxy = IConnectionService.Stub.asInterface(serviceManagerProxy.getService(connectionServiceProxy.getClass().getSimpleName()));</span><br><span class="line">                    messageServiceProxy = IMessageService.Stub.asInterface(serviceManagerProxy.getService(messageServiceProxy.getClass().getSimpleName()));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>消息服务对象初始化完成后，需要在主进程中完成消息服务三个方法的实现，即主进程IPC调用的实现。再定义三个Button，并在对应的点击事件中完成消息服务三个方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.btn_sendMessage:</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                message.setContent(<span class="string">"message send from main"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messageServiceProxy.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_register:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messageServiceProxy.registerMessageReceiverListener(messageReceiveListener);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_unRegister:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messageServiceProxy.unRegisterMessageReceiverListener(messageReceiveListener);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>主进程设置实现消息服务的监听和取消监听时，需要在MainActivty中定义一个MessageReceiverListener对象，并完成其AIDL的实现。这里MessageReceiverListener的方法的实现是在主进程中的，通过<code>messageServiceProxy.registerMessageReceiverListener()</code>，把<code>messageReceiveListener</code>对象设置到RemoteService中，相当于完成了一次remote进程对主进程的IPC调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MessageReceiveListener messageReceiveListener = <span class="keyword">new</span> MessageReceiveListener.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveMessage</span><span class="params">(<span class="keyword">final</span> Message message)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, message.getContent(), Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); <span class="comment">//通过Handler切换到主线程之后再进程UI操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h1&gt;&lt;h2 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://www.bcblog.top/tags/Android/"/>
    
  </entry>
  
</feed>
